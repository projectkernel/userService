// Code generated by MockGen. DO NOT EDIT.
// Source: src/signin/method.go

// Package signin is a generated GoMock package.
package signin

import (
	pojo "auth/src/pojo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMethod is a mock of Method interface
type MockMethod struct {
	ctrl     *gomock.Controller
	recorder *MockMethodMockRecorder
}

// MockMethodMockRecorder is the mock recorder for MockMethod
type MockMethodMockRecorder struct {
	mock *MockMethod
}

// NewMockMethod creates a new mock instance
func NewMockMethod(ctrl *gomock.Controller) *MockMethod {
	mock := &MockMethod{ctrl: ctrl}
	mock.recorder = &MockMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMethod) EXPECT() *MockMethodMockRecorder {
	return m.recorder
}

// Auth mocks base method
func (m *MockMethod) Auth(authCode string) (string, string, error) {
	ret := m.ctrl.Call(m, "Auth", authCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Auth indicates an expected call of Auth
func (mr *MockMethodMockRecorder) Auth(authCode interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockMethod)(nil).Auth), authCode)
}

// Info mocks base method
func (m *MockMethod) Info(accessToken string) (*pojo.User, error) {
	ret := m.ctrl.Call(m, "Info", accessToken)
	ret0, _ := ret[0].(*pojo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockMethodMockRecorder) Info(accessToken interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockMethod)(nil).Info), accessToken)
}
